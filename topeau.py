# -*- coding: utf-8 -*-
"""
/***************************************************************************
 TopEau
                                 A QGIS plugin
 Variables relatives au niveau d'eau dans les marais du projet MAVI
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-05-15
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Marion Bleuse
        email                : marion.bleuse8@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import *

#import du fichier traitement concernant l'analyse raster
from .traitement import *
#import du fichier traitement concernant l'import des données eau
from .imports import *
#import du fichier traitement concernant l'analyse biodiversité
from .biodiv import *
# import du fichier traitement concernant l'analyse gestion de l'eau
from .calcul import *
# import du fichier à propos
from .about import *

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
import os.path


class TopEau:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.interface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'TopEau_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/topeau/icon.png'

        # will be set False in run()
        self.first_start = True

        self.menu = QMenu(self.interface.mainWindow())
        self.menu.setObjectName("topeau")
        self.menu.setTitle("Top'Eau")
        self.toolbar = self.interface.addToolBar(u"Top'Eau")
        self.toolbar.setObjectName("TopEau")

        # Bouton Analyse raster - différence entre le niveau d'eau et le sol
        self.actionTraitement = QAction("1. Analyse raster", self.interface.mainWindow())
        self.actionTraitement.triggered.connect(self.openTraitement)
        # Bouton Import des données eau
        self.actionImport = QAction("2. Import des données de mesure d'eau", self.interface.mainWindow())
        self.actionImport.triggered.connect(self.openImport)
        # Bouton Requêtage biodiv
        self.actionBiodiv = QAction("3.a Analyse fine : écoute biodiversité", self.interface.mainWindow())
        self.actionBiodiv.triggered.connect(self.openBiodiv)
        # Bouton Calculs gestion eau
        self.actionCalculs = QAction("3.b Analyse fine : indicateur pour la gestion de l'eau", self.interface.mainWindow())
        self.actionCalculs.triggered.connect(self.openCalculs)
        # Bouton Visualisation stats eau
        #self.actionCalculs = QAction("Bonus : visualisation des statistiques", self.interface.mainWindow())
        #self.actionCalculs.triggered.connect(self.openVisu)
        # Bouton Notice
        self.actionHelp = QAction("Aide", self.interface.mainWindow())
        self.actionHelp.triggered.connect(self.openHelp)
        # Bouton À propos
        self.actionAbout = QAction("À propos", self.interface.mainWindow())
        self.actionAbout.triggered.connect(self.openAbout)

        # Ajout des boutons dans la barres des menus
        self.menu.addAction(self.actionTraitement)
        self.menu.addAction(self.actionImport)
        self.menu.addAction(self.actionBiodiv)
        self.menu.addAction(self.actionCalculs)
        self.menu.addSeparator()
        self.menu.addAction(self.actionHelp)
        self.menu.addAction(self.actionAbout)
        menuBar = self.interface.mainWindow().menuBar()

        # création et insertion du menu
        menuBar.insertMenu(self.interface.firstRightStandardMenu().menuAction(), self.menu)

    # connexion au fichier traitement.py relatif à l'analyse raster
    def openTraitement(self):
        traitement = TraitementWidget(self.interface)
        result = traitement.exec_()
        # message permettant de contrôler la validité du code dans la console Python de QGIS
        print('ok')

    # connexion au fichier imports.py relatif à l'import des données eau dans la table mesure dédiée
    def openImport(self):
        imports = ImportWidget(self.interface)
        result = imports.exec_()
        print("ok")

    # connexion au fichier biodiv.py relatif à l'analyse ponctuelle des données eau pour l'écoute biodiv
    def openBiodiv(self):
        biodiv = BiodivWidget(self.interface)
        result = biodiv.exec_()
        print("ok")

    def openCalculs(self):
        calculs = CalculWidget(self.interface)
        result = calculs.exec_()
        print("ok")

    """
    def openVisu(self):
        visu = VisuWidget(self.interface)
        result = visu.exec_()
        print("ok")
    """

    def openHelp(self):
        # accès au dossier « notice » et au fichier notice.pdf pour obtenir de l'aide avec l'utilisation plugin
        localHelp = (os.path.dirname(__file__) + "/notice/notice_plugin.pdf")
        localHelp = localHelp.replace("\\", "/")
        QDesktopServices.openUrl(QUrl.fromLocalFile(localHelp))
        # message permettant de contrôler la validité du code dans la console Python de QGIS
        print('ok')

    def openAbout(self):
        #accès au script about.py pour avoir accès à la vue "à propos"
        about = AboutWidget(self.interface)
        about.show()
        result = about.exec_()
        #message permettant de contrôler la validité du code dans la console Python de QGIS
        print('ok')

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        self.interface.mainWindow().menuBar().removeAction(self.menu.menuAction())

